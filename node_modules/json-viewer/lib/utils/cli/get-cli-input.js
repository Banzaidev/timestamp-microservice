'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCliInput = undefined;

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var getCliInput = exports.getCliInput = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var isPiped;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            isPiped = !process.stdin.isTTY;

            /* istanbul ignore else */

            if (!isPiped) {
              _context.next = 3;
              break;
            }

            return _context.abrupt('return', new Promise(function (resolve, reject) {
              var processInput = '';

              process.stdin.setEncoding('utf8');

              process.stdin.on('readable', function () {
                var chunk = process.stdin.read();

                if (chunk !== null) {
                  processInput = _ramda2.default.concat(processInput, chunk);
                } else {
                  resolve(processInput);
                }
              });

              process.stdin.on('error', reject);
            }));

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function getCliInput() {
    return _ref.apply(this, arguments);
  };
}();