'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

require('babel-polyfill');

var _jsonViewer = require('./json-viewer');

var _config = require('./utils/config');

var _cli = require('./utils/cli');

var _prettyPrint = require('./utils/console/pretty-print');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var moduleWrapper = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var cliInput, cliParams, userConfig, shouldExecuteFurther, result, colorOutput;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _cli.getCliInput)();

          case 2:
            cliInput = _context.sent;
            cliParams = (0, _cli.getCliParams)();
            userConfig = (0, _config.setUserConfig)(cliParams, (0, _config.getUserConfig)());
            shouldExecuteFurther = cliParams.alwaysColor !== true;


            if (shouldExecuteFurther) {
              result = (0, _jsonViewer.jsonViewer)(cliInput, cliParams);
              colorOutput = cliParams.color || userConfig.color;


              (0, _prettyPrint.prettyPrint)(null, result, 0, colorOutput);
            }

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function moduleWrapper() {
    return _ref.apply(this, arguments);
  };
}();

moduleWrapper();

module.exports = _jsonViewer.jsonViewer;

exports.default = _jsonViewer.jsonViewer;